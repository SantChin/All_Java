Q1:What is difference between web-server and application server?
A:	Application server may contain Webserver but webserver does not contain Application Server.
	Webserver deals with HTTP and HTTPS protocals,but Application Server deals any type of protocals.
	Webserver receives request and sends back response as HTML pages, 
	where as Application Server manages enterprise java objects whether they are servlets, 
	JMS listeners and EJB objects.
==============================	
Q2.What are different types of bean scopes ?
A: The core of the Spring framework is a Bean Factory.
	and it's mechanism to create and manage the beans inside the Spring containers.  
	In bean, attribute Scope is referred to what kind of object has to create and returned to the container.
	In Spring, there are five bean scopes are available, three of which are available only if you use web-aware ApplicationContext.
	Bean scopes are singleton,  prototype, request, session and global session
	
Singleton : Only one instance of bean for spring container(default)
	The Spring IOC container can create only one instance per container irrespective of how many times you request for this instance. 
	This is the default bean scope.
	This singleton behavior is maintained by bean factory itself.
	
prototype : A new instance every time a bean is requested
			The Spring IOC container creates new bean instance of the object at every time request for that specific bean is made. 
			To achieve prototype scope, declare scope attribute as prototype in the bean configuration file as below,

request	  : Single bean instance per HTTP request.
			In this bean scope, a new bean instance will be created for each web request made by client.
			As soon as request completes, bean will be out of scope and garbage collected. 
			This scope only available web aware ApplicationContext i.e WebApplicationContext.

session	  : Single bean instance per HTTP session.
			 It is also like request scope, this ensures one instance of bean per user session.
			 As soon as user ends its session, bean is out of scope.
			 This scope only available web aware ApplicationContext i.e WebApplicationContext.

global-session : Single bean instance per global HTTP session.
	 This is something which is connected to Portlet applications.
	 When your application works in Portlet container it is built of some amount of portlets. Each portlet has its own session, 
	 but if your want to store variables global for all portlets in your application than you should store them in global-session.
		
==============================
Q3:What is IOC Container in Spring? Difference between BeanFactory and ApplicationContext
A:	The Spring IOC Container is a core of the Spring Framework, It will create the objects, wire them together, configure and manage complete
	life cycle from creation till destruction.
	The Spring Container uses DI(Dependency Injection) to manage the components that make up an application
	The Container will create the objects, those objects are called as Spring Beans.	
	Spring bean is nothing special any java pojo instantiated through spring continer is called spring bean.
	
There are two types of Spring IOC Containers :

1.BeanFactory Container
	 BeanFactory is the root interface of Spring IoC container.
	 It is defined in the org.springframework.beans.factory package.
	 One of the most popularly used implementation of BeanFactory is the XMLBeanFactory
	 The XMLBeanFactory allows the representation of objects and their rich dependencies in terms of XML.
	 The XMLBeanFactory allows the representation of objects and their rich dependencies in terms of XML. 
	 The XmlBeanFactory takes XML configuration metadata to create the fully  configured application.
	 
	 Eg: 
	 <?xml version="1.0" encoding="UTF-8"?>
		<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
		
		<bean id="helloWorld" class="com.src.sample.HelloWorld"> 
			<property name="message" value="Hello World!"/> 
		</bean>
		
		package com.src.sample; 
		import org.springframework.beans.factory.InitializingBean;
		import org.springframework.beans.factory.xml.XmlBeanFactory; 
		import org.springframework.core.io.ClassPathResource; 
		
		public class HelloWorldMain {     
			public static void main(String[] args) {           
				XmlBeanFactory factory = new XmlBeanFactory (new ClassPathResource("Beans.xml")); 
				HelloWorld obj = (HelloWorld) factory.getBean("helloWorld"); 
				obj.getMessage(); 
			} 
		}	
	   In the above program, the XmlBeanFactory loads the metadata XML based on the CLASSPATH variable.  
	   It uses the configuration metadata to load, assemble and dispense the beans upon request.
2.ApplicationContext Container
	
	 ApplicationContext is defined by the org.springframework.context.ApplicationContext interface.
	 ApplicationContext can also perform more enterprise functionalities like transaction, AOP, 
		resolving text messages from properties files, and push application events to interested listeners.
	
	popularly used ApplicationContext implementations are:
	FileSystemXmlApplicationContext       
        This implementation loads the definitions of the beans from an XML file.
		It is required to provide the full path of the XML bean configuration file to the constructor.


	ClassPathXmlApplicationContext
      This container loads the definitions of the beans from an XML file.  
	  However, it is not required to provide the full path of the XML file. It does require you to set
	  CLASSPATH properly because this container will look for bean configuration XML file in the specified CLASSPATH.

	XmlWebApplicationContext
	This container loads the XML file with definitions of all beans from within a web application.

		